---
import TrashIcon from '@icons/TrashIcon.svg'
import AlertIcon from '@icons/AlertIcon.svg'
import Sections from '@layouts/Sections.astro';
import Bookmark from '@components/decoration/Bookmark.astro';

export interface Product {
    id_category: number,
    name_product: string,
    code_product: string, 
    cost: number,
    change_date: any,
    name_category: string,
    guarantee: number,
    name_color: string, 
    sale_price: number
    warehouses: Warehouses[]
}

interface Warehouses {
    amount: number,
    name_warehouse: string
}

interface Props {
    creationDate: any,
    customerName: string,
    amount: number,
    products: Product[],
    state: string,
    orderNumber: string
}

const {creationDate, customerName, amount, products, state, orderNumber} = Astro.props


const bgColor = state?
    (state === "pagado"? "bg-green-100 text-green-800" :
     state === "pendiente"? "bg-blue-100 text-blue-800" :
    "") : "";
---
<Sections style='md:w-xl w-xs self-center text-xs md:text-sm relative shadow-lg'>
    
    <dialog id="delete-dialog" class="w-sm h-80 mx-auto my-auto rounded-lg">
        <div class="w-full h-full flex flex-col gap-10 items-center justify-center">
            <picture class="text-red-700 size-20">
                <AlertIcon/>
            </picture>
            <p class="text-gray-500">¿Estás seguro de eliminar esta operación?</p>
            <div class="flex gap-4">
                <button id="cancel-dialog" class="cursor-pointer h-8 w-auto border px-3 py-1  text-gray-500  rounded-full">
                    Cancelar
                </button>
                <button id="security-delete" class="cursor-pointer h-8 w-auto border px-3 py-1 text-red-700 rounded-full">
                    Borrar
                </button>
            </div>
        </div>
    </dialog>


    <!-- Header con número de orden y cliente -->
    <div class="flex justify-between items-center">
        
        <Bookmark>
            <div class='flex gap-2 items-center'>
                <span class="text-gray-700 text-xs md:text-lg">Orden:</span><span id="order-number" class="text-theme-light-blue text-xs md:text-lg">#{orderNumber}</span>
            </div>
            <span class=`ml-2 hidden md:block bg-blue-100 text-xs font-medium px-2.5 py-0.5 rounded-full ${bgColor}`>
                {state === "pagado"? ("finalizada"):(state)}
            </span>
        </Bookmark>
           
        
        <div class="flex gap-6 items-center">
            
            <div class="text-right">
                <p class="text-sm text-gray-500">Cliente</p>
                <p class="font-medium text-gray-900">{customerName}</p>
            </div>

            <button id="delete_button" class="cursor-pointer h-8 w-auto border p-1 text-red-700 rounded-full">
                <TrashIcon/>
            </button>
        </div>
    </div>

    <!-- Detalles de la operación -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <!-- <div class="bg-gray-50 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-500 mb-1">Productos</h3>
            <div class="flex gap-3 flex-col">
            {
                products.map((product: Product)=>(
                    <p class="text-gray-900">{product.name_product}</p>
                ))
            }
            </div>
        </div> -->
        
        <div class="bg-gray-50 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-500 mb-1">Monto</h3>
            <p class="text-gray-900">${amount.toLocaleString('es-VE')}</p>
        </div>
        
        <div class="bg-gray-50 p-4 rounded-lg">
            <h3 class="text-sm font-medium text-gray-500 mb-1">Fecha</h3>
            <p class="text-gray-900">{creationDate}</p>
        </div>
    </div>

    <!-- Sección adicional para notas si es necesario -->
   
</Sections>

<script>
    document.getElementById('delete_button')?.addEventListener('click', () => {
        const dialog = document.getElementById('delete-dialog') as HTMLDialogElement;
        dialog.showModal();
    });

    document.getElementById('cancel-dialog')?.addEventListener('click', () => {
        const dialog = document.getElementById('delete-dialog') as HTMLDialogElement;
        dialog.close();
    });
</script>

<script>
    import {deleteOperation} from "@lib/deleteOperation";
    const delOperation = async () => {
        const orderNumber = document.getElementById('order-number')?.textContent?.split('#')[1] as string;
       const securityDelete = document.getElementById('security-delete') as HTMLButtonElement;
       securityDelete.addEventListener('click', async () => {
            console.log(orderNumber)
            await deleteOperation(orderNumber);
       })
    }
    
    delOperation()
</script>