---
import DateDolar from '@components/DateDolar.astro'
import SummaryButton from './SummaryButton.astro'
import { BACK_API } from 'astro:env/client'
import MenuIcon from '@icons/menuIcon.svg'
import { fetchAuth } from '@lib/fetchAuth'

const cookie = Astro.request.headers.get('cookie') || ''

const res = await fetch(`${BACK_API}/api/get-all-orders`, {
  method: 'GET',
  headers: {
    Cookie: cookie
  }
})

const { data } = await res.json()
---


<header class="flex items-center justify-center text-theme-light-gray text-xs md:text-sm w-full lg:justify-end">

    
       <div class="flex items-center gap-2 max-w-[400px] justify-center md:gap-8 md:max-w-full lg:justify-end lg:pr-10">
        
        <button id="menu-button" class="size-8 text-theme-light-blue lg:hidden mr-4">
            <MenuIcon/>
        </button>

        <div class="relative flex items-center md:gap-4">
           
            <input 

                id="order-search" 
                autocomplete="off"
                type="search" 
                placeholder="número de orden" 
                class="max-w-20 border rounded-2xl py-1 px-2 text md:max-w-full"
            >
            <div id="search-results" class="absolute top-10 z-10 mt-1 w-full bg-white rounded-md shadow-lg hidden max-h-60 overflow-y-auto"></div>
        </div>
        
        <DateDolar>
            <span slot="fallback">
                Loading date and dollar information...
            </span>
        </DateDolar> 
       </div>
           
            
            <!-- <SummaryButton/> -->
            
        
</header>



<script is:inline define:vars={{ data }}>
    // Obtener referencias a los elementos del DOM
    const searchInput = document.getElementById('order-search');
    const searchResults = document.getElementById('search-results');
    
    // Función para filtrar órdenes según el texto ingresado
    function filterOrders(searchText) {
        if (!searchText) {
            searchResults.classList.add('hidden');
            return;
        }
        
        // Filtrar las órdenes que coincidan con el texto de búsqueda
        const filteredOrders = data.filter(order => 
            order.order_number.toString().includes(searchText)
        );
        
        // Mostrar resultados
        displayResults(filteredOrders);
    }
    
    // Función para mostrar los resultados filtrados
    function displayResults(orders) {
        // Limpiar resultados anteriores
        searchResults.innerHTML = '';
        
        if (orders.length === 0) {
            searchResults.innerHTML = '<div class="px-4 py-2 text-sm text-gray-500">No se encontraron órdenes</div>';
            searchResults.classList.remove('hidden');
            return;
        }
        
        // Crear elementos para cada orden encontrada
        orders.slice(0, 5).forEach(order => {
            const resultItem = document.createElement('div');
            resultItem.className = 'px-4 py-2 text-sm text-theme-ocean-blue hover:bg-gray-100 cursor-pointer';
            resultItem.textContent = `#${order.order_number}`;
            
            // Agregar evento de clic para navegar a la orden
            resultItem.addEventListener('click', () => {
                window.location.href = `/operation/${order.order_number}`;
            });
            
            searchResults.appendChild(resultItem);
        });
        
        // Mostrar el contenedor de resultados
        searchResults.classList.remove('hidden');
    }
    
    // Escuchar eventos de entrada en el campo de búsqueda
    searchInput.addEventListener('input', (e) => {
        const searchText = e.target.value.trim();
        filterOrders(searchText);
    });
    
    // Ocultar resultados cuando se hace clic fuera del campo de búsqueda
    document.addEventListener('click', (e) => {
        if (e.target !== searchInput && !searchResults.contains(e.target)) {
            searchResults.classList.add('hidden');
        }
    });
    
    // Mostrar resultados al hacer clic en el campo de búsqueda si hay texto
    searchInput.addEventListener('focus', () => {
        if (searchInput.value.trim()) {
            filterOrders(searchInput.value.trim());
        }
    });
</script>


<style>
    @media (max-width: 1280px){
        
    }
</style>

<script>
    const menuButton = document.getElementById('menu-button') as HTMLButtonElement 
    const menuNav = document.getElementById('menuNav') as HTMLDivElement
    const circle = document.getElementById('menu') as HTMLDivElement
    const closeButton = document.getElementById('close-button') as HTMLButtonElement
    
    menuButton.addEventListener('click', ()=>{
        menuNav.classList.remove('invisible')

        circle.classList.remove('invisible')
        circle.classList.add('scale-[4000%]')
    })

    closeButton.addEventListener('click', ()=>{
        menuNav.classList.add('invisible')

        circle.classList.add('invisible')
        circle.classList.remove('scale-[3000%]')
    })
</script>